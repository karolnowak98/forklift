//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Logic.Input
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
        ""name"": ""Controls"",
        ""maps"": [
            {
                ""name"": ""Player"",
                ""id"": ""04945f09-d6b7-4bb0-8c1c-93e446e931f0"",
                ""actions"": [
                    {
                        ""name"": ""Drive"",
                        ""type"": ""Value"",
                        ""id"": ""b0b0a3ea-8f63-496f-ad39-f10baa2425b8"",
                        ""expectedControlType"": ""Vector2"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": true
                    },
                    {
                        ""name"": ""Lift"",
                        ""type"": ""Button"",
                        ""id"": ""60f2c70a-3530-4855-9682-edfabf6d80ff"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""Lower"",
                        ""type"": ""Button"",
                        ""id"": ""3dcc2c3c-7f8c-4dbc-93ac-3b2e75e02ce5"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    }
                ],
                ""bindings"": [
                    {
                        ""name"": ""WASD"",
                        ""id"": ""00ca640b-d935-4593-8157-c05846ea39b3"",
                        ""path"": ""Dpad"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Drive"",
                        ""isComposite"": true,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""up"",
                        ""id"": ""e2062cb9-1b15-46a2-838c-2f8d72a0bdd9"",
                        ""path"": ""<Keyboard>/w"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""up"",
                        ""id"": ""8180e8bd-4097-4f4e-ab88-4523101a6ce9"",
                        ""path"": ""<Keyboard>/upArrow"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""down"",
                        ""id"": ""320bffee-a40b-4347-ac70-c210eb8bc73a"",
                        ""path"": ""<Keyboard>/s"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""down"",
                        ""id"": ""1c5327b5-f71c-4f60-99c7-4e737386f1d1"",
                        ""path"": ""<Keyboard>/downArrow"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""left"",
                        ""id"": ""d2581a9b-1d11-4566-b27d-b92aff5fabbc"",
                        ""path"": ""<Keyboard>/a"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""left"",
                        ""id"": ""2e46982e-44cc-431b-9f0b-c11910bf467a"",
                        ""path"": ""<Keyboard>/leftArrow"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""right"",
                        ""id"": ""fcfe95b8-67b9-4526-84b5-5d0bc98d6400"",
                        ""path"": ""<Keyboard>/d"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""right"",
                        ""id"": ""77bff152-3580-4b21-b6de-dcd0c7e41164"",
                        ""path"": ""<Keyboard>/rightArrow"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": "";Keyboard&Mouse"",
                        ""action"": ""Drive"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": """",
                        ""id"": ""fdae0c1b-50ab-4c75-9c34-1563ff6e52a3"",
                        ""path"": ""<Keyboard>/q"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Lift"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""4080f293-4db7-4760-b311-cebb6c388a5e"",
                        ""path"": ""<Keyboard>/e"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Lower"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    }
                ]
            }
        ],
        ""controlSchemes"": [
            {
                ""name"": ""Keyboard&Mouse"",
                ""bindingGroup"": ""Keyboard&Mouse"",
                ""devices"": [
                    {
                        ""devicePath"": ""<Keyboard>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    },
                    {
                        ""devicePath"": ""<Mouse>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""Gamepad"",
                ""bindingGroup"": ""Gamepad"",
                ""devices"": [
                    {
                        ""devicePath"": ""<Gamepad>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""Touch"",
                ""bindingGroup"": ""Touch"",
                ""devices"": [
                    {
                        ""devicePath"": ""<Touchscreen>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""Joystick"",
                ""bindingGroup"": ""Joystick"",
                ""devices"": [
                    {
                        ""devicePath"": ""<Joystick>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""XR"",
                ""bindingGroup"": ""XR"",
                ""devices"": [
                    {
                        ""devicePath"": ""<XRController>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            }
        ]
    }");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Drive = m_Player.FindAction("Drive", throwIfNotFound: true);
            m_Player_Lift = m_Player.FindAction("Lift", throwIfNotFound: true);
            m_Player_Lower = m_Player.FindAction("Lower", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Drive;
        private readonly InputAction m_Player_Lift;
        private readonly InputAction m_Player_Lower;
        public struct PlayerActions
        {
            private @Controls m_Wrapper;
            public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drive => m_Wrapper.m_Player_Drive;
            public InputAction @Lift => m_Wrapper.m_Player_Lift;
            public InputAction @Lower => m_Wrapper.m_Player_Lower;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Drive.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrive;
                    @Drive.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrive;
                    @Drive.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDrive;
                    @Lift.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLift;
                    @Lift.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLift;
                    @Lift.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLift;
                    @Lower.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLower;
                    @Lower.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLower;
                    @Lower.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLower;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Drive.started += instance.OnDrive;
                    @Drive.performed += instance.OnDrive;
                    @Drive.canceled += instance.OnDrive;
                    @Lift.started += instance.OnLift;
                    @Lift.performed += instance.OnLift;
                    @Lift.canceled += instance.OnLift;
                    @Lower.started += instance.OnLower;
                    @Lower.performed += instance.OnLower;
                    @Lower.canceled += instance.OnLower;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnDrive(InputAction.CallbackContext context);
            void OnLift(InputAction.CallbackContext context);
            void OnLower(InputAction.CallbackContext context);
        }
    }
}